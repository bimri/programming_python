Other bind Events

• <ButtonRelease> fires when a button is released (<ButtonPress> is run when the
button first goes down).
• <Motion> is triggered when a mouse pointer is moved.
• <Enter> and <Leave> handlers intercept mouse entry and exit in a window’s display
area (useful for automatically highlighting a widget).
• <Configure> is invoked when the window is resized, repositioned, and so on (e.g.,
the event object’s width and height give the new window size). We’ll make use of
this to resize the display on window resizes in the PyClock example of Chapter 11.
• <Destroy> is invoked when the window widget is destroyed (and differs from the
protocol mechanism for window manager close button presses). Since this interacts
with widget quit and destroy methods, I’ll say more about the event later in
this section.
• <FocusIn> and <FocusOut> are run as the widget gains and loses focus.
• <Map> and <Unmap> are run when a window is opened and iconified.
• <Escape>, <BackSpace>, and <Tab> catch other special key presses.
• <Down>, <Left>, and <Right> catch other arrow key presses.


This is not a complete list, and event names can be written with a somewhat sophisticated
syntax of their own. For instance:

• Modifiers can be added to event identifiers to make them even more specific; for
instance, <B1-Motion> means moving the mouse with the left button pressed, and
<KeyPress-a> refers to pressing the “a” key only.
• Synonyms can be used for some common event names; for instance, <Button
Press-1>, <Button-1>, and <1> mean a left mouse button press, and <KeyPress-a>
and <Key-a> mean the “a” key. All forms are case sensitive: use <Key-Escape>, not
<KEY-ESCAPE>.
• Virtual event identifiers can be defined within double bracket pairs (e.g., <<Paste
Text>>) to refer to a selection of one or more event sequences.